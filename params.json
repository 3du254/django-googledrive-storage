{"name":"Django Google Drive Storage","tagline":" Storage implementation for Django that interacts with Google Drive","body":"### How it works\r\n\r\n[Django Google Drive Storage](https://github.com/torre76/django-googledrive-storage) is an implementation of [Django Storage](https://docs.djangoproject.com/en/1.6/ref/files/storage/) that uses [Google Drive](https://drive.google.com) ad backend.\r\n\r\nPlease notice that **with this implementation you could not save or load data from a user's Drive**. You can use only a Drive **dedicated to a Google Project**. This means that:\r\n\r\n* this Storage interacts with Google Drive as a Google Project, not a Google User. \r\n* your project can use Google Drive only thru [Google Drive SDK](https://developers.google.com/drive/). Because no user is associated with this Drive, **you cannot use Google Drive User Interface**.\r\n* this Storage authenticates with Google using public private keys. See [prerequisites](#Prerequisites) for how to obtain it.\r\n\r\nHaving stated that, with this storage you gain a 25GB space hosted on Google Server where to store your data using Django models.\r\n\r\n### Prerequisites\r\n\r\nTo use this storage, you have to:\r\n\r\n* [set up a project and application in the Google Developers Console](https://console.developers.google.com/flows/enableapi?apiid=drive)\r\n* [obtain the key for your Google Project associated with Google Drive service](https://developers.google.com/drive/web/service-accounts#google_developers_console_project_service_accounts)\r\n\r\n### Installation\r\n\r\nThis storage is hosted on [PyPI](https://pypi.python.org/pypi). It can be easily installed thru _pip_:\r\n\r\n```bash\r\npip install django-googledrive-storage\r\n```\r\n\r\n### Setup\r\n\r\nOnce installed, there are some few steps to configure the storage:\r\n\r\n* add the module _gdstorage_ to your installed apps:\r\n```python\r\nINSTALLED_APPS = (\r\n    ...,\r\n    'django.contrib.staticfiles',\r\n    'gdstorage'\r\n)\r\n```\r\n\r\n* create a section in your _setting.py_ that contains the configuration for this storage:\r\n\r\n```python\r\n#\r\n# Google Drive Storage Settings\r\n#\r\n\r\nGOOGLE_DRIVE_STORAGE = {\r\n    'service_account':{\r\n        'email': <project email associated by Google>,\r\n        'private_key_file_path': <p12 certificate file path, relative to your project, obtained by Google>\r\n    }\r\n}\r\n```\r\n\r\nThe **email** should be the email Google assigned to your project, while the **private_key_file_path** must be the p12 file obtained by Google.\r\n\r\n* instantiate the storage on you _models.py_ file before using into the models:\r\n\r\n```python\r\nfrom gdstorage.storage import GoogleDriveStorage\r\n\r\n# Define Google Drive Storage\r\ngd_storage = GoogleDriveStorage()\r\n```\r\n\r\n### Use\r\n\r\nOnce configured you could use it as any storage for Django:\r\n\r\n```python\r\nclass Map(models.Model):\r\n    id = models.AutoField( primary_key=True)\r\n    map_name = models.CharField(max_length=200)\r\n    map_data = models.FileField(upload_to='/maps', storage=gd_storage)\r\n```","google":"UA-51097925-1","note":"Don't delete this file! It's used internally to help with page regeneration."}